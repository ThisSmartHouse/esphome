esphome:
  name: $device_name
  platform: ESP8266
  board: esp01_1m
  build_path: "./build/${device_name}"

<<: !include ../../common/wifi-static.yaml
<<: !include ../../common/captive_portal.yaml
<<: !include ../../common/ota.yaml

<<: !include ../../common/text_sensor/standard.yaml

api:
  password: !secret password
  services:
    - service: send_rf_code
      variables:
        sync: int
        low: int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low: !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'
    - service: send_rf_raw
      variables:
        raw: string
      then:
        - rf_bridge.send_raw:
            raw: !lambda 'return raw;'

    - service: send_rf_advanced_code
      variables:
        length: int
        protocol: int
        code: string
      then:
        - rf_bridge.send_advanced_code:
            length: !lambda 'return length;'
            protocol: !lambda 'return protocol;'
            code: !lambda 'return code;'
    - service: start_rf_advanced_sniffing
      then:
        - rf_bridge.start_advanced_sniffing
    - service: stop_rf_advanced_sniffing
      then:
        - rf_bridge.stop_advanced_sniffing
    - service: learn
      then:
        - rf_bridge.learn

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200

logger:
  baud_rate: 0

status_led:
  pin:
    number: GPIO13
    inverted: yes
    
rf_bridge:
  on_advanced_code_received:
    then:
      - logger.log: "Advanced Code Received!"
      - homeassistant.event:
          event: esphome.rf_advanced_code_received
          data:
            length: !lambda 'char buffer [10];return itoa(data.length,buffer,16);'
            protocol: !lambda 'char buffer [10];return itoa(data.protocol,buffer,16);'
            code: !lambda 'return data.code;'

  on_code_received:
    then:
      - logger.log: "Code Received!"
      - homeassistant.event:
          event: esphome.rf_code_received
          data:
            sync: !lambda 'char buffer[10]; return itoa(data.sync, buffer, 16);'
            low: !lambda 'char buffer[10]; return itoa(data.low, buffer, 16);'
            high: !lambda 'char buffer[10]; return itoa(data.high, buffer, 16);'
            code: !lambda 'char buffer[10]; return itoa(data.code, buffer, 16);'
